---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by musmusliu.
--- DateTime: 2021/10/1 11:28
---

local CoroutineServiceClass = DeclareClass("CoroutineServiceClass")

function CoroutineServiceClass:ctor()
    self._dataList = {}
end

function CoroutineServiceClass:StartCoroutine(func, ...)
    if not func then
        return
    end

    local thread = coroutine.create(func)

    local result, parameter = coroutine.resume(thread, ...)
    if not result or not parameter then
        return
    end

    local data = {}
    data.parameter = parameter
    data.thread = thread
    data.func = func
    self._dataList[#self._dataList + 1] = data
end

function CoroutineServiceClass:WaitForTime(sec)
    coroutine.yield(sec or 0)
end

function CoroutineServiceClass:OnTick(deltaTime)
    for i = #self._dataList, 1, -1 do
        local data = self._dataList[i]
        data.parameter = data.parameter - deltaTime

        if data.parameter <= 0 then
            local result, parameter = coroutine.resume(data.thread)
            if not result or not parameter or parameter <= 0 then
                table.remove(self._dataList, i)
                break
            end

            data.parameter = parameter
        end
    end
end

CoroutineService = CoroutineServiceClass.new()