---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by musmusliu.
--- DateTime: 2021/10/13 14:19
---

Platform = {
    Android = 1,
    iOS = 2
}

PlatformName = {
    "Android",
    "iOS"
}

local MDBServiceClass = DeclareClass("MDBServiceClass")

function MDBServiceClass:ctor()
    self._adbService = false
    self._idbService = false

    self._platform = Platform.Android
end

function MDBServiceClass:Initialize(processKit)
    self._adbService = ClassLib.ADBServiceClass.new()
    self._adbService:Initialize(processKit)
    self._idbService = ClassLib.IDBServiceClass.new()
    self._idbService:Initialize(processKit)
end

function MDBServiceClass:GetPlatform()
    return self._platform
end

function MDBServiceClass:SetPlatform(platform)
    self._platform = platform
end

function MDBServiceClass:KillServer()
    if self._platform == Platform.Android then
        return self._adbService:KillServer()
    else
        LogE("iOS不支持该功能")
        return false
    end
end

function MDBServiceClass:StartServer()
    if self._platform == Platform.Android then
        return self._adbService:StartServer()
    else
        LogE("iOS不支持该功能")
        return false
    end
end

function MDBServiceClass:Push(deviceName, srcPath, dstPath)
    if self._platform == Platform.Android then
        return self._adbService:Push(deviceName, srcPath, dstPath)
    else
        LogE("iOS不支持该功能")
        return false
    end
end

function MDBServiceClass:Pull(deviceName, srcPath, dstPath, bundleName)
    if self._platform == Platform.Android then
        return self._adbService:Pull(deviceName, srcPath, dstPath)
    else
        LogE("iOS暂不支持该功能")
        return false
        -- return self._idbService:Pull(deviceName, bundleName, srcPath, dstPath)
    end
end

function MDBServiceClass:Install(deviceName, appPath)
    if self._platform == Platform.Android then
        return self._adbService:Install(deviceName, appPath)
    else
        return self._idbService:Install(deviceName, appPath)
    end
end

function MDBServiceClass:Logcat(deviceName, priority, format, outputFilePath)
    if self._platform == Platform.Android then
        return self._adbService:Logcat(deviceName, priority, format, outputFilePath)
    else
        return self._idbService:Logcat(deviceName, outputFilePath)
    end
end

function MDBServiceClass:Connect(address)
    if self._platform == Platform.Android then
        return self._adbService:Connect(address)
    else
        LogE("iOS不支持该功能")
        return false
    end
end

function MDBServiceClass:Disconnect(address)
    if self._platform == Platform.Android then
        return self._adbService:Disconnect(address)
    else
        LogE("iOS不支持该功能")
        return false
    end
end

function MDBServiceClass:StopProcess()
    if self._platform == Platform.Android then
        return self._adbService:StopProcess()
    else
        return self._idbService:StopProcess()
    end
end

function MDBServiceClass:GetDevices()
    if self._platform == Platform.Android then
        return self._adbService:GetDevices()
    else
        return self._idbService:GetDevices()
    end
end

function MDBServiceClass:ReportCrash(deviceName, dir)
    if self._platform == Platform.Android then
        LogE("Android不支持该功能")
        return false
    else
        return self._idbService:ReportCrash(deviceName, dir)
    end
end

function MDBServiceClass:KillProcess()
    self._adbService:KillProcess()
    self._idbService:KillProcess()
end

MDBService = MDBServiceClass.new()